{"version":3,"file":"must-use-result.js","names":["resultVars: string[]"],"sources":["../../src/rules/must-use-result.ts"],"sourcesContent":["import { ESLintUtils } from '@typescript-eslint/utils'\nimport { createRule } from '../utils'\nimport ts from 'typescript'\n\nconst VALID_USAGE_METHODS = new Set(['unwrap', 'match'])\n\nexport const rule = createRule({\n  create(context) {\n    const services = ESLintUtils.getParserServices(context)\n    const checker = services.program.getTypeChecker()\n\n    const resultVariables = new Map<\n      string,\n      { node: any; used: boolean; returned: boolean; yielded: boolean }\n    >()\n\n    const tryBlockGenerators = new WeakSet<any>() // Track generator functions in tryBlock\n\n    function isValidUsage(node: any): boolean {\n      return (\n        node.property.type === 'Identifier' &&\n        VALID_USAGE_METHODS.has(node.property.name)\n      )\n    }\n\n    // Helper function to find Result variables in any expression\n    function findResultVariablesInExpression(expression: any): string[] {\n      const resultVars: string[] = []\n\n      function traverse(node: any): void {\n        if (node.type === 'Identifier') {\n          const varName = node.name\n          const variableInfo = resultVariables.get(varName)\n          if (variableInfo) {\n            resultVars.push(varName)\n          }\n        }\n\n        // Traverse child nodes\n        for (const key in node) {\n          if (key === 'parent' || key === 'comments') continue\n          const value = node[key]\n          if (value && typeof value === 'object') {\n            traverse(value)\n          } else if (Array.isArray(value)) {\n            value.forEach(traverse)\n          }\n        }\n      }\n\n      traverse(expression)\n      return resultVars\n    }\n\n    return {\n      CallExpression(node) {\n        // Detect tryBlock(async function*() { ... })\n        if (\n          node.callee.type === 'Identifier' &&\n          node.callee.name === 'tryBlock' &&\n          node.arguments.length > 0 &&\n          node.arguments[0].type === 'FunctionExpression' &&\n          node.arguments[0].generator\n        ) {\n          tryBlockGenerators.add(node.arguments[0])\n        }\n      },\n\n      YieldExpression(node) {\n        if (!node.argument) return\n\n        // Find all Result variables in the yield expression\n        const resultVars = findResultVariablesInExpression(node.argument)\n\n        // Mark all found Result variables as yielded\n        for (const varName of resultVars) {\n          const variableInfo = resultVariables.get(varName)\n          if (variableInfo) {\n            resultVariables.set(varName, { ...variableInfo, yielded: true })\n          }\n        }\n      },\n\n      ExpressionStatement(node) {\n        const expression = node.expression\n\n        if (\n          expression.type === 'CallExpression' &&\n          expression.callee.type === 'MemberExpression' &&\n          isValidUsage(expression.callee)\n        ) {\n          return\n        }\n\n        const tsNode = services.esTreeNodeToTSNodeMap.get(expression)\n        const type = checker.getTypeAtLocation(tsNode)\n\n        if (isResultType(type, checker)) {\n          context.report({\n            node,\n            messageId: 'mustUseResult',\n          })\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (!node.init) return\n\n        const tsNode = services.esTreeNodeToTSNodeMap.get(node.init)\n        const type = checker.getTypeAtLocation(tsNode)\n\n        if (isResultType(type, checker) && node.id.type === 'Identifier') {\n          resultVariables.set(node.id.name, {\n            node: node.id,\n            used: false,\n            returned: false,\n            yielded: false,\n          })\n        }\n      },\n\n      MemberExpression(node) {\n        if (isValidUsage(node)) {\n          if (node.object.type === 'Identifier') {\n            const varName = node.object.name\n            const variableInfo = resultVariables.get(varName)\n            if (variableInfo) {\n              resultVariables.set(varName, { ...variableInfo, used: true })\n            }\n          }\n        }\n      },\n\n      ReturnStatement(node) {\n        if (node.argument) {\n          // Find Result variables in the return expression\n          const resultVars = findResultVariablesInExpression(node.argument)\n          for (const varName of resultVars) {\n            const variableInfo = resultVariables.get(varName)\n            if (variableInfo) {\n              resultVariables.set(varName, { ...variableInfo, returned: true })\n            }\n          }\n        }\n      },\n\n      'FunctionExpression:exit'(node) {\n        if (tryBlockGenerators.has(node)) {\n          // We are exiting a generator inside tryBlock, nothing more to do here\n          return\n        }\n      },\n\n      'Program:exit'() {\n        for (const [\n          varName,\n          { node, used, returned, yielded },\n        ] of resultVariables.entries()) {\n          if (!used && !returned && !yielded) {\n            context.report({\n              node,\n              messageId: 'mustUseResult',\n            })\n          }\n        }\n      },\n    }\n  },\n  meta: {\n    docs: {\n      description:\n        'Must use result by calling .unwrap() or .match() on it, unless returned, yielded, or used in tryBlock with yield*.',\n      recommended: true,\n      requiresTypeChecking: true,\n    },\n    messages: {\n      mustUseResult:\n        'Must use result by calling .unwrap() or .match() on it, unless returned, yielded, or yield* in tryBlock.',\n    },\n    type: 'problem',\n    schema: [],\n  },\n  name: 'must-use-result',\n  defaultOptions: [],\n})\n\nfunction isResultType(type: ts.Type, checker: ts.TypeChecker): boolean {\n  const hasValidMethod = VALID_USAGE_METHODS.values().some((method) =>\n    type.getProperty(method),\n  )\n\n  if (!hasValidMethod) {\n    return false\n  }\n\n  const symbol = type.getSymbol()\n  if (symbol && symbol.getName().includes('Result')) {\n    return true\n  }\n\n  if (type.isUnionOrIntersection()) {\n    return type.types.some((t) => isResultType(t, checker))\n  }\n\n  return false\n}\n"],"mappings":";;;;;AAIA,MAAM,sBAAsB,IAAI,IAAI,CAAC,UAAU,QAAQ,CAAC;AAExD,MAAa,OAAO,WAAW;CAC7B,OAAO,SAAS;EACd,MAAM,WAAW,YAAY,kBAAkB,QAAQ;EACvD,MAAM,UAAU,SAAS,QAAQ,gBAAgB;EAEjD,MAAM,kCAAkB,IAAI,KAGzB;EAEH,MAAM,qCAAqB,IAAI,SAAc;EAE7C,SAAS,aAAa,MAAoB;AACxC,UACE,KAAK,SAAS,SAAS,gBACvB,oBAAoB,IAAI,KAAK,SAAS,KAAK;;EAK/C,SAAS,gCAAgC,YAA2B;GAClE,MAAMA,aAAuB,EAAE;GAE/B,SAAS,SAAS,MAAiB;AACjC,QAAI,KAAK,SAAS,cAAc;KAC9B,MAAM,UAAU,KAAK;AAErB,SADqB,gBAAgB,IAAI,QAAQ,CAE/C,YAAW,KAAK,QAAQ;;AAK5B,SAAK,MAAM,OAAO,MAAM;AACtB,SAAI,QAAQ,YAAY,QAAQ,WAAY;KAC5C,MAAM,QAAQ,KAAK;AACnB,SAAI,SAAS,OAAO,UAAU,SAC5B,UAAS,MAAM;cACN,MAAM,QAAQ,MAAM,CAC7B,OAAM,QAAQ,SAAS;;;AAK7B,YAAS,WAAW;AACpB,UAAO;;AAGT,SAAO;GACL,eAAe,MAAM;AAEnB,QACE,KAAK,OAAO,SAAS,gBACrB,KAAK,OAAO,SAAS,cACrB,KAAK,UAAU,SAAS,KACxB,KAAK,UAAU,GAAG,SAAS,wBAC3B,KAAK,UAAU,GAAG,UAElB,oBAAmB,IAAI,KAAK,UAAU,GAAG;;GAI7C,gBAAgB,MAAM;AACpB,QAAI,CAAC,KAAK,SAAU;IAGpB,MAAM,aAAa,gCAAgC,KAAK,SAAS;AAGjE,SAAK,MAAM,WAAW,YAAY;KAChC,MAAM,eAAe,gBAAgB,IAAI,QAAQ;AACjD,SAAI,aACF,iBAAgB,IAAI,SAAS;MAAE,GAAG;MAAc,SAAS;MAAM,CAAC;;;GAKtE,oBAAoB,MAAM;IACxB,MAAM,aAAa,KAAK;AAExB,QACE,WAAW,SAAS,oBACpB,WAAW,OAAO,SAAS,sBAC3B,aAAa,WAAW,OAAO,CAE/B;IAGF,MAAM,SAAS,SAAS,sBAAsB,IAAI,WAAW;AAG7D,QAAI,aAFS,QAAQ,kBAAkB,OAAO,EAEvB,QAAQ,CAC7B,SAAQ,OAAO;KACb;KACA,WAAW;KACZ,CAAC;;GAIN,mBAAmB,MAAM;AACvB,QAAI,CAAC,KAAK,KAAM;IAEhB,MAAM,SAAS,SAAS,sBAAsB,IAAI,KAAK,KAAK;AAG5D,QAAI,aAFS,QAAQ,kBAAkB,OAAO,EAEvB,QAAQ,IAAI,KAAK,GAAG,SAAS,aAClD,iBAAgB,IAAI,KAAK,GAAG,MAAM;KAChC,MAAM,KAAK;KACX,MAAM;KACN,UAAU;KACV,SAAS;KACV,CAAC;;GAIN,iBAAiB,MAAM;AACrB,QAAI,aAAa,KAAK,EACpB;SAAI,KAAK,OAAO,SAAS,cAAc;MACrC,MAAM,UAAU,KAAK,OAAO;MAC5B,MAAM,eAAe,gBAAgB,IAAI,QAAQ;AACjD,UAAI,aACF,iBAAgB,IAAI,SAAS;OAAE,GAAG;OAAc,MAAM;OAAM,CAAC;;;;GAMrE,gBAAgB,MAAM;AACpB,QAAI,KAAK,UAAU;KAEjB,MAAM,aAAa,gCAAgC,KAAK,SAAS;AACjE,UAAK,MAAM,WAAW,YAAY;MAChC,MAAM,eAAe,gBAAgB,IAAI,QAAQ;AACjD,UAAI,aACF,iBAAgB,IAAI,SAAS;OAAE,GAAG;OAAc,UAAU;OAAM,CAAC;;;;GAMzE,0BAA0B,MAAM;AAC9B,QAAI,mBAAmB,IAAI,KAAK,CAE9B;;GAIJ,iBAAiB;AACf,SAAK,MAAM,CACT,SACA,EAAE,MAAM,MAAM,UAAU,cACrB,gBAAgB,SAAS,CAC5B,KAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QACzB,SAAQ,OAAO;KACb;KACA,WAAW;KACZ,CAAC;;GAIT;;CAEH,MAAM;EACJ,MAAM;GACJ,aACE;GACF,aAAa;GACb,sBAAsB;GACvB;EACD,UAAU,EACR,eACE,4GACH;EACD,MAAM;EACN,QAAQ,EAAE;EACX;CACD,MAAM;CACN,gBAAgB,EAAE;CACnB,CAAC;AAEF,SAAS,aAAa,MAAe,SAAkC;AAKrE,KAAI,CAJmB,oBAAoB,QAAQ,CAAC,MAAM,WACxD,KAAK,YAAY,OAAO,CACzB,CAGC,QAAO;CAGT,MAAM,SAAS,KAAK,WAAW;AAC/B,KAAI,UAAU,OAAO,SAAS,CAAC,SAAS,SAAS,CAC/C,QAAO;AAGT,KAAI,KAAK,uBAAuB,CAC9B,QAAO,KAAK,MAAM,MAAM,MAAM,aAAa,GAAG,QAAQ,CAAC;AAGzD,QAAO"}