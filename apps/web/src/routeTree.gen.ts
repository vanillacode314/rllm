/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as SettingsStorageRouteImport } from './routes/settings/storage'
import { Route as SettingsProxyRouteImport } from './routes/settings/proxy'
import { Route as SettingsProvidersRouteImport } from './routes/settings/providers'
import { Route as SettingsMcpRouteImport } from './routes/settings/mcp'
import { Route as SettingsDataRouteImport } from './routes/settings/data'
import { Route as SettingsAppearanceRouteImport } from './routes/settings/appearance'
import { Route as SettingsAccountRouteImport } from './routes/settings/account'
import { Route as ChatSplatRouteImport } from './routes/chat/$'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsStorageRoute = SettingsStorageRouteImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsProxyRoute = SettingsProxyRouteImport.update({
  id: '/proxy',
  path: '/proxy',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsProvidersRoute = SettingsProvidersRouteImport.update({
  id: '/providers',
  path: '/providers',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsMcpRoute = SettingsMcpRouteImport.update({
  id: '/mcp',
  path: '/mcp',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsDataRoute = SettingsDataRouteImport.update({
  id: '/data',
  path: '/data',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsAppearanceRoute = SettingsAppearanceRouteImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => SettingsRoute,
} as any)
const SettingsAccountRoute = SettingsAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => SettingsRoute,
} as any)
const ChatSplatRoute = ChatSplatRouteImport.update({
  id: '/chat/$',
  path: '/chat/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/settings': typeof SettingsRouteWithChildren
  '/chat/$': typeof ChatSplatRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/data': typeof SettingsDataRoute
  '/settings/mcp': typeof SettingsMcpRoute
  '/settings/providers': typeof SettingsProvidersRoute
  '/settings/proxy': typeof SettingsProxyRoute
  '/settings/storage': typeof SettingsStorageRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/chat/$': typeof ChatSplatRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/data': typeof SettingsDataRoute
  '/settings/mcp': typeof SettingsMcpRoute
  '/settings/providers': typeof SettingsProvidersRoute
  '/settings/proxy': typeof SettingsProxyRoute
  '/settings/storage': typeof SettingsStorageRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/settings': typeof SettingsRouteWithChildren
  '/chat/$': typeof ChatSplatRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/data': typeof SettingsDataRoute
  '/settings/mcp': typeof SettingsMcpRoute
  '/settings/providers': typeof SettingsProvidersRoute
  '/settings/proxy': typeof SettingsProxyRoute
  '/settings/storage': typeof SettingsStorageRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/settings'
    | '/chat/$'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/data'
    | '/settings/mcp'
    | '/settings/providers'
    | '/settings/proxy'
    | '/settings/storage'
    | '/settings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/chat/$'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/data'
    | '/settings/mcp'
    | '/settings/providers'
    | '/settings/proxy'
    | '/settings/storage'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/settings'
    | '/chat/$'
    | '/settings/account'
    | '/settings/appearance'
    | '/settings/data'
    | '/settings/mcp'
    | '/settings/providers'
    | '/settings/proxy'
    | '/settings/storage'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  ChatSplatRoute: typeof ChatSplatRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/storage': {
      id: '/settings/storage'
      path: '/storage'
      fullPath: '/settings/storage'
      preLoaderRoute: typeof SettingsStorageRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/proxy': {
      id: '/settings/proxy'
      path: '/proxy'
      fullPath: '/settings/proxy'
      preLoaderRoute: typeof SettingsProxyRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/providers': {
      id: '/settings/providers'
      path: '/providers'
      fullPath: '/settings/providers'
      preLoaderRoute: typeof SettingsProvidersRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/mcp': {
      id: '/settings/mcp'
      path: '/mcp'
      fullPath: '/settings/mcp'
      preLoaderRoute: typeof SettingsMcpRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/data': {
      id: '/settings/data'
      path: '/data'
      fullPath: '/settings/data'
      preLoaderRoute: typeof SettingsDataRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountRouteImport
      parentRoute: typeof SettingsRoute
    }
    '/chat/$': {
      id: '/chat/$'
      path: '/chat/$'
      fullPath: '/chat/$'
      preLoaderRoute: typeof ChatSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettingsRouteChildren {
  SettingsAccountRoute: typeof SettingsAccountRoute
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsDataRoute: typeof SettingsDataRoute
  SettingsMcpRoute: typeof SettingsMcpRoute
  SettingsProvidersRoute: typeof SettingsProvidersRoute
  SettingsProxyRoute: typeof SettingsProxyRoute
  SettingsStorageRoute: typeof SettingsStorageRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsAccountRoute: SettingsAccountRoute,
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsDataRoute: SettingsDataRoute,
  SettingsMcpRoute: SettingsMcpRoute,
  SettingsProvidersRoute: SettingsProvidersRoute,
  SettingsProxyRoute: SettingsProxyRoute,
  SettingsStorageRoute: SettingsStorageRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  SettingsRoute: SettingsRouteWithChildren,
  ChatSplatRoute: ChatSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
